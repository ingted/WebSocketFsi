<?xml version="1.0" encoding="utf-8"?>
<doc>
<assembly><name>Interactive.DependencyManager</name></assembly>
<members>
<member name="P:InteractiveDependencyManager.SR.SwallowResourceText(System.Boolean)">
<summary>
 If set to true, then all error messages will just return the filled &apos;holes&apos; delimited by &apos;,,,&apos;s - this is for language-neutral testing (e.g. localization-invariant baselines).
</summary>
</member>
<member name="M:InteractiveDependencyManager.SR.packageManagerUnknown(System.String,System.String,System.String)">
<summary>
 Package manager key &apos;%s&apos; was not registered in %s. Currently registered: %s
 (Originally from InteractiveDependencyManager.txt:2)
</summary>
</member>
<member name="M:InteractiveDependencyManager.SR.packageManagerError(System.String)">
<summary>
 %s
 (Originally from InteractiveDependencyManager.txt:3)
</summary>
</member>
<member name="P:InteractiveDependencyManager.SR.SwallowResourceText">
<summary>
 If set to true, then all error messages will just return the filled &apos;holes&apos; delimited by &apos;,,,&apos;s - this is for language-neutral testing (e.g. localization-invariant baselines).
</summary>
</member>
<member name="M:InteractiveDependencyManager.SR.couldNotLoadDependencyManagerExtension(System.String,System.String)">
<summary>
 The dependency manager extension %s could not be loaded. Message: %s
 (Originally from InteractiveDependencyManager.txt:4)
</summary>
</member>
<member name="M:InteractiveDependencyManager.SR.RunStartupValidation">
<summary>
 Call this method once to validate that all known resources are valid; throws if not
</summary>
</member>
<member name="P:Internal.Utilities.FSharpEnvironment.FSharpBannerVersion">
<summary>
 The F# version reported in the banner
</summary>
</member>
<member name="M:Internal.Utilities.FSharpEnvironment.Option.ofString(System.String)">
<summary>
 Convert string into Option string where null and String.Empty result in None
</summary>
</member>
<member name="M:Microsoft.Interactive.DependencyManager.AssemblyResolveHandler.#ctor(Microsoft.Interactive.DependencyManager.AssemblyResolutionProbe)">
<summary>
 Construct a new DependencyProvider
</summary>
</member>
<member name="T:Microsoft.Interactive.DependencyManager.AssemblyResolveHandler">
<summary>
 Handle Assembly resolution
</summary>
</member>
<member name="T:Microsoft.Interactive.DependencyManager.AssemblyResolutionProbe">
<summary>
 Signature for ResolutionProbe callback
 host implements this, it&apos;s job is to return a list of assembly paths to probe.
</summary>
</member>
<member name="M:Microsoft.Interactive.DependencyManager.NativeDllResolveHandler.#ctor(Microsoft.Interactive.DependencyManager.NativeResolutionProbe)">
<summary>
 Construct a new DependencyProvider
</summary>
</member>
<member name="T:Microsoft.Interactive.DependencyManager.NativeResolutionProbe">
<summary>
 Signature for Native library resolution probe callback
 host implements this, it&apos;s job is to return a list of package roots to probe.
</summary>
</member>
<member name="M:Microsoft.Interactive.DependencyManager.DependencyProvider.TryFindDependencyManagerInPath(System.Collections.Generic.IEnumerable{System.String},System.String,Microsoft.Interactive.DependencyManager.ResolvingErrorReport,System.String)">
<summary>
 TryFindDependencyManagerInPath - given a #r &quot;key:sometext&quot; go and find a DependencyManager that satisfies the key
</summary>
</member>
<member name="M:Microsoft.Interactive.DependencyManager.DependencyProvider.TryFindDependencyManagerByKey(System.Collections.Generic.IEnumerable{System.String},System.String,Microsoft.Interactive.DependencyManager.ResolvingErrorReport,System.String)">
<summary>
 Fetch a dependencymanager that supports a specific key
</summary>
</member>
<member name="M:Microsoft.Interactive.DependencyManager.DependencyProvider.Resolve(Microsoft.Interactive.DependencyManager.IDependencyManagerProvider,System.String,System.Collections.Generic.IEnumerable{System.String},Microsoft.Interactive.DependencyManager.ResolvingErrorReport,System.String,System.String,System.String,System.String,System.String)">
<summary>
 Resolve reference for a list of package manager lines
</summary>
</member>
<member name="M:Microsoft.Interactive.DependencyManager.DependencyProvider.RemoveDependencyManagerKey(System.String,System.String)">
<summary>
 Remove the dependency mager with the specified key
</summary>
</member>
<member name="M:Microsoft.Interactive.DependencyManager.DependencyProvider.CreatePackageManagerUnknownError(System.Collections.Generic.IEnumerable{System.String},System.String,System.String,Microsoft.Interactive.DependencyManager.ResolvingErrorReport)">
<summary>
 Returns a formatted error message for the host to present
</summary>
</member>
<member name="M:Microsoft.Interactive.DependencyManager.DependencyProvider.#ctor(Microsoft.Interactive.DependencyManager.NativeResolutionProbe)">
<summary>
 Construct a new DependencyProvider
</summary>
</member>
<member name="M:Microsoft.Interactive.DependencyManager.DependencyProvider.#ctor(Microsoft.Interactive.DependencyManager.AssemblyResolutionProbe,Microsoft.Interactive.DependencyManager.NativeResolutionProbe)">
<summary>
 Construct a new DependencyProvider
</summary>
</member>
<member name="T:Microsoft.Interactive.DependencyManager.DependencyProvider">
<summary>
 Provides DependencyManagement functions.
 Class is IDisposable
</summary>
</member>
<member name="T:Microsoft.Interactive.DependencyManager.ErrorReportType">
<summary>
 Todo describe this API
</summary>
</member>
<member name="P:Microsoft.Interactive.DependencyManager.IDependencyManagerProvider.Name">
<summary>
 Name of the dependency manager
</summary>
</member>
<member name="P:Microsoft.Interactive.DependencyManager.IDependencyManagerProvider.Key">
<summary>
 Key that identifies the types of dependencies that this DependencyManager operates on
 E.g
     nuget: indicates that this DM is for nuget packages
     paket: indicates that this DM is for paket scripts, which manage nuget packages, github source dependencies etc ...
</summary>
</member>
<member name="M:Microsoft.Interactive.DependencyManager.IDependencyManagerProvider.ResolveDependencies(System.String,System.String,System.String,System.String,System.Collections.Generic.IEnumerable{System.String},System.String,System.String)">
<summary>
 Resolve the dependencies, for the given set of arguments, go find the .dll references, scripts and additional include values.
</summary>
</member>
<member name="T:Microsoft.Interactive.DependencyManager.IDependencyManagerProvider">
<summary>
 Wraps access to a DependencyManager implementation
</summary>
</member>
<member name="P:Microsoft.Interactive.DependencyManager.IResolveDependenciesResult.Success">
<summary>
 Succeded?
</summary>
</member>
<member name="P:Microsoft.Interactive.DependencyManager.IResolveDependenciesResult.StdOut">
<summary>
 The resolution output log
</summary>
</member>
<member name="P:Microsoft.Interactive.DependencyManager.IResolveDependenciesResult.StdError">
<summary>
 The resolution error log (process stderr)
</summary>
</member>
<member name="P:Microsoft.Interactive.DependencyManager.IResolveDependenciesResult.SourceFiles">
<summary>
 The source code file paths
</summary>
</member>
<member name="P:Microsoft.Interactive.DependencyManager.IResolveDependenciesResult.Roots">
<summary>
 The roots to package directories
</summary>
</member>
<member name="P:Microsoft.Interactive.DependencyManager.IResolveDependenciesResult.Resolutions">
<summary>
 The resolution paths
</summary>
</member>
<member name="T:Microsoft.Interactive.DependencyManager.IResolveDependenciesResult">
<summary>
 The results of ResolveDependencies
</summary>
</member>
</members>
</doc>
